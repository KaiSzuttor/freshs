#!/bin/sh
# Copyright (c) 2012 Josh Berryman, University of Luxembourg,
# Pfaffenwaldring 27, 70569 Stuttgart, Germany; all rights
# reserved unless otherwise stated.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA 02111-1307 USA


#
# get_rc_aggregation
# ---------------------
#
# Get an rc value based on cluster sizes
#
#############################################################
proc get_rc_aggregation { r_contact n_part } {

    ##get the size of the largest cluster
    set lastId [expr int($n_part - 1)]
    set agreturn [analyze aggregation $r_contact 0 $lastId]
    set rc [lindex $agreturn 1]

    puts "Set RC: $rc"

    return $rc

}


###Debug flag: set 1 to turn on extra output. (Not threadsafe).
set debug 0

foreach {option value} $argv {
  switch -glob -- $option {
    -tmpdir             {set TMP_DIR $value }
    -in_fifoname        {set INPUT_CONFIG $value }
    -back_fifoname      {set OUTPUT_CONFIG $value }
    -metadata_fifoname  {set OUTPUT_METADATA $value }
    -halt_steps         {set HALT_STEPS $value }
    -check_rc_every     {set CHECK_RC_EVERY $value }
    -halt_rc_lower      {set HALT_RC_LOWER $value }
    -halt_rc_upper      {set HALT_RC_UPPER $value }
    -seed               {set SEED $value }
    default             {puts "Additional not-used parameter $option with value $value"}
  }
}

set stop_at_b 0
if { $CHECK_RC_EVERY != 0 } {
   set stop_at_b 1
}

set warnCount 0
set warnMax  10


#############################################################
#  Parameters                                               #
#############################################################

# System parameters
#############################################################

# 10 000  Particles
set box_l   10.7437
set density 0.7

# Interaction parameters (repulsive Lennard Jones)
#############################################################

set lj1_eps     1.0
set lj1_sig     1.0
##longer range to allow attractive part
set lj1_cut     4.0 
set lj1_shift   [calc_lj_shift $lj1_sig $lj1_cut]

set r_contact   [expr $lj1_sig * 1.0]


# Integration parameters
#############################################################
setmd time_step 0.01
setmd skin      0.4
thermostat langevin 1.0 1.0

t_random seed $SEED

#############################################################
set tcl_precision 6

#############################################################
#  Setup System                                             #
#############################################################

# Interaction setup
#############################################################

setmd box_l $box_l $box_l $box_l
inter 0 0 lennard-jones $lj1_eps $lj1_sig $lj1_cut $lj1_shift 0


# Particle setup
#############################################################
set volume [expr $box_l*$box_l*$box_l]
set n_part [expr floor($volume*$density)]
setmd max_num_cells 2744
for {set i 0} { $i < $n_part } {incr i} {
    part $i pos 0.0 0.0 0.0 type 0
}

##define the (trivial) topology
for {set i 0} { $i < $n_part} {incr i} {
    set topo_chain 0
    lappend topo_chain [expr $i]
    lappend topo $topo_chain
}
eval analyze set $topo
analyze set "topo_part_sync"

##read coordinates 
puts "MD: opening input pipe $INPUT_CONFIG"
set input_channel [open $INPUT_CONFIG {RDONLY NONBLOCK}]
fconfigure $input_channel -blocking 1
#############################################################
#      Read in a config                                     #
#############################################################
puts "MD: waiting for data"

set chars_read [ gets $input_channel expect_count ]
puts "read first line, expecting: $expect_count"

set chars_read [ gets $input_channel first_line ]
puts "read first coords line: $first_line"


###this flag controls whether coords are saved to file
###or sent back to FRESHS as a string
set COORDS_FROM_FILE 0
set COORDS_TO_FILE   0
if { [string match f1* "$first_line"] == 1 } {
    set COORDS_FROM_FILE 1
    set records [split $first_line " "]
    set in_fileName  [lindex $records 1]
    puts "Client reading from file: $in_fileName"
}
if { [string match *f2* "$first_line"] == 1 } {
    set COORDS_TO_FILE 1
    set records [split $first_line " "]
    set out_fileName  [lindex $records 3]
    puts "Client writing to file: $out_fileName"
}

##reading from a file
if { $COORDS_FROM_FILE == 1 } {
    ##read a blockfile
    set input_file [open $in_fileName {RDONLY}]
    while { [blockfile $input_file read auto] != "eof" } {}
    close $input_file
} else {
	set count 0
        set block_or_eof $first_line
	while {  $count < $n_part } {

		    if { $chars_read > 0 } {
			##set the coords
			set fields [split $block_or_eof " "]
			set l [llength $fields]
			if  { $l == 3 } {
			    part $count pos [lindex $fields 0]  [lindex $fields 1] [lindex $fields 2]
			    set count [expr $count + 1 ]
			} elseif { $l == 6 } {
			    part $count pos [lindex $fields 0]  [lindex $fields 1] [lindex $fields 2] 
			    part $count v   [lindex $fields 3]  [lindex $fields 4] [lindex $fields 5] 
			    set count [expr $count + 1 ]
			} else {
			  if { $warnCount < $warnMax } {
			    puts "simulation process received unexpected input: ${l} fields in line"
			    puts "simulation process received unexpected input: _${block_or_eof}_"
			    puts "field 0: "
			    puts [lindex $fields 0]
			    puts "field 6: "
			    puts [lindex $fields 6]
			    set warnCount [expr $warnCount + 1 ]
			  }
			}
		    } else {
			puts "Got EOF at count: $count , of expected: $n_part"
			break
		    }
		    set chars_read [ gets $input_channel block_or_eof ]
                    

		    if { $count < 3 } {
			    puts "MD line count: $count , read:  $fields  "
		    } 
	}
} 

if { $debug == 1 } {
        set debugF [open "espresso_debug.vtf" "w"]
        writevsf $debugF
        writevcf $debugF
}

#############################################################
#      Integration                                          #
#############################################################
set rclast [get_rc_aggregation $r_contact $n_part]
set rc      $rclast

if { $stop_at_b == 1 } {
        set int_step 1
} else {
        set int_step $HALT_STEPS
}
set i 0
while { 1 } {

        integrate $int_step
        set i [expr ($i + $int_step)]

        ##REACTION COORDINATE: CALCULATE HERE      
        if { $stop_at_b == 1 } {
                set rclast $rc
                set rc    [get_rc_aggregation $r_contact $n_part]
            
                puts "rc: $rc"
                if { $debug == 1 } {
                    puts "rc: $rc"
                    writevcf $debugF
                }
                if { $rc >= $HALT_RC_UPPER } {
                            if { $rclast < $HALT_RC_UPPER }  {
                                    break
                            }
                } elseif { $rc >= $HALT_RC_LOWER && $rclast < $HALT_RC_LOWER } {
                            break
                } elseif { $rc <= $HALT_RC_LOWER && $rclast > $HALT_RC_LOWER } {
                            break
                }
        }
      
        if { $HALT_STEPS > 0 && $i >= $HALT_STEPS } {

             ##REACTION COORDINATE: CALCULATE HERE
             set rclast $rc
             set rc    [get_rc_aggregation $r_contact $n_part]
             break

        }

 ###This close-brackets signifies end of simulation
}
puts "MD: Quitting: rc $rc , rclast $rclast, steps $i, haltsteps $HALT_STEPS."

#############################################################
puts "MD: opening output pipe $OUTPUT_CONFIG"
set output_channel [open $OUTPUT_CONFIG {WRONLY}]
#fconfigure $output_channel -blocking 1

if { $COORDS_TO_FILE == 0 } {
    ##write out the final coords
    set count 0
    while {  $count < $n_part } {
        set crds_vels [part $count print pos v]
        puts $output_channel $crds_vels
        set count [expr $count + 1 ]
    }
    flush $output_channel
    close $output_channel   
} else {

    set output_coords_file [open $out_fileName {WRONLY CREAT TRUNC}]
    
    ##write out the final coords
    blockfile $output_coords_file write variable  box_l
    blockfile $output_coords_file write particles {id pos v}

    close $output_coords_file
    
    ##just write the filename to pipe
    set output_channel [open $OUTPUT_CONFIG {WRONLY}]
    puts  $output_channel "$out_fileName"
    flush $output_channel
    close $output_channel   
}


    puts "MD: opening output RC data $OUTPUT_METADATA"
    set output_metadata_channel [open $OUTPUT_METADATA {WRONLY}]
    set t [setmd time]
    puts $output_metadata_channel [format "{\"rc\": %.4f, \"steps\": %i, \"time\": %.4f}" $rc $i $t]
    puts "MD: sent: "
    puts [format "{\"rc\": %.4f, \"steps\": %i, \"time\": %.4f}" $rc $i $t]
    flush $output_metadata_channel
    close $output_metadata_channel   
    close $input_channel
    

puts "\n Simulation Finished \n"
exit


